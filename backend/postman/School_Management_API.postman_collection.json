{
  "info": {
    "name": "School Management System API",
    "description": "API collection for School Management System backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "school-management-api",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:4001/api/v1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "API Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has data field with message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Get basic API information and status"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 503', function () {",
                  "    pm.expect([200, 503]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Response has health data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "    pm.expect(responseJson.data).to.have.property('database');",
                  "    pm.expect(responseJson.data).to.have.property('timestamp');",
                  "    pm.expect(responseJson.data).to.have.property('uptime');",
                  "    pm.expect(responseJson.data).to.have.property('memory');",
                  "});",
                  "",
                  "pm.test('Database status is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(['connected', 'disconnected']).to.include(responseJson.data.database);",
                  "});",
                  "",
                  "pm.test('Status matches HTTP status code', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(responseJson.data.status).to.equal('OK');",
                  "    } else if (pm.response.code === 503) {",
                  "        pm.expect(responseJson.data.status).to.equal('DEGRADED');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Check application and database health status"
          },
          "response": []
        }
      ],
      "description": "Endpoints for checking API health and status"
    },
    {
      "name": "Users Management",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('pagination');",
                  "    pm.expect(responseJson.pagination).to.have.property('page');",
                  "    pm.expect(responseJson.pagination).to.have.property('limit');",
                  "    pm.expect(responseJson.pagination).to.have.property('total');",
                  "    pm.expect(responseJson.pagination).to.have.property('pages');",
                  "});",
                  "",
                  "pm.test('Response data is array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get paginated list of users"
          },
          "response": []
        },
        {
          "name": "Get Users with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?role=ADMIN&isActive=true&search=admin&sortBy=createdAt&sortOrder=desc",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "role",
                  "value": "ADMIN"
                },
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "search",
                  "value": "admin"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            },
            "description": "Get filtered list of users"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            },
            "description": "Get user details by ID"
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('user_id', responseJson.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@school.edu\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"role\": \"OPERATOR\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            },
            "description": "Update user information"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            },
            "description": "Deactivate a user"
          },
          "response": []
        },
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "stats"
              ]
            },
            "description": "Get user statistics by role and status"
          },
          "response": []
        }
      ],
      "description": "CRUD operations for user management with filtering and pagination"
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "404 Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has success field set to false', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/nonexistent",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "nonexistent"
              ]
            },
            "description": "Test 404 error handling for non-existent routes"
          },
          "response": []
        }
      ],
      "description": "Test error handling scenarios"
    }
  ]
}